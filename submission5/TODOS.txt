Problems from reviews:
We claim generality, but only test one thing.
Solution - don't claim generality.

We have a lot of parameterization, but again, only test one thing.
Solution - define properties in terms of a single system, sufficiently complex as to
be convincing that we can do others.

s/parameterized/extensible/
Still need to emphasize reuse

We don't have much of an advantage over Skorstengaard.
Solution - Focus on the one advantage we do have, which is laziness.

Opportunities:
Laziness

Our division of LSE into integrity and confidentiality was a useful insight for which
we are cited. (There's a catch, though, we should also handle confidentiality of callee.)

============

Conceptual:
Determine where annotations come from and how we can manage them with increasingly complex system
Proposal - Start with an IR with a few pseudoinstructions (call, return, setjump/longjump, etc.)
	   This requires a compilation step, which we were trying to avoid, but it
	   removes the indirectness of maps -- and then compilation can tag the resulting
	   sequences appropriately.

Prop 1.5 - Or keep maps, generate them with compilation step.

Prop 2 -   Or put the instructions in the machine, have a section on how to lower to be more realistic.
	   (In presentation, not necessarily formalization.)

Prop 3 -   Instead of pseudoinstructions, extend operational semantics of machine + PIPE so that
           instruction sequences execute in a single cycle. In HL semantics, one PIPE rule
	   for sequence; in LL, normal PIPE rules.

Still don't know where this comes from -- what if we used an IR that actually deals with C/C++, like LLVM?

Determine the threat model (or if it's the same, figure out how to explain it better.)
Explicitly talk about the error vs. attack question.

Figure out how we should talk about the heap and address-taken locals. There may be clues
in how Nick and Andre approached it.

Technical:
Finalize set of features, rework single property to include all of them

Implement testing for as many features as reasonable

Clean up development and testing

Writing:
A lot of what we have can be reused, but here is a rough outline with todos highlighted.

I. Introduction

II. The Machine
Replaces threat model, etc., but is more about actually defining the machine, since that
will not be pretty substantial. Include writing about where code comes from in principle.

III. Stack Safety by Example
We can now use the machine in the examples instead of defining an ad hoc one.

IV. Observational Stack Safety
Covers current chapters IV and VII, all at once. This will be very dense. Need to work on explaining it better.

V. Validation Through Randomized Testing
Current Chapter IX.

VI. Related Work

VII. Future Work
