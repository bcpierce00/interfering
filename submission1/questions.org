* Final states:
** What constitutes a final state? 
One idea was to have an X-parametric property, where X contains 
the address of an instruction that is considered "terminating". 
*** Issues
- Immediately, that means we no longer have infinite traces in separation and stack safety.
  Should we therefore allow infinite traces in the definition of noninterference?
- Loops? What if the "unmatched return" was inside a loop. Should we allow that/plan for that?
- Do we want to talk about noninterference of succesfully terminating traces? i.e. only
  ones that execute the instruction above? Is any run halted by the monitor noninterfering?

BCP: I think we should just make the ===> relation be partial (i.e.,
abstractly, put in a HALT instruction).  This will raise a few questions
(e.g., what happens if the machine halts during a function call?), and when
we get to focusing on the RISC-V we will need to acknowledge that the
outermost caller will never be "checked" for NI because it never halts
(which is fine because its contour is trivial anyway), but I think it will
mostly simplify and streamline.

* Lockstep:
BCP: Eeek. Just realized why we absolutely need the “lock-step” part!
The closure operator that snips out a “subtrace”between a call and the
corresponding return has to do the snipping on both traces at once,
and this only makes sense if they are executing in lockstep.  

LEO: Not sure. The closure operator as I've described it takes the
triple (C, M, M') and an index i corresponding to a call, calculates
the contour at that step (based on number of previous calls and
returns), computes a subtrace from M, beginning at M_i and ending at
the first unmatched return. Then creates _every_ variation M_i' based
on the new contour, and requires that the traces starting from _that_
and going until the (same? I guess doesn't have to be) unmatched
return paired with the new contour and the subrace are in the
property. We're not snipping two traces. Do we still require lockstep?

BCP: As I said in my (late) email, I think you are right here.

* Hyperproperty terminology:
BCP: I’m not certain we’re using the word correctly. E.g., “A
hyperproperty is a set of properties [Clarkson and Schneider 2008,
2010]" 

BCP: After more reading, I am still wondering if we’re using the word
the right way. I think we mean something much less general just a
relation on traces. So I think we should just say “contoured relation”
(and maybe “lockstep-relation”).

LEO: Clarkson and Schneider say: "the extension of a system property
is a set of sets of traces or, equivalently, a set of trace
properties. We name this type of set a hyperproperty". What we are
describing in the new formalization (contour x trace x trace) is a
parameterized hyperproperty, where we index each pair of traces with a
contour (where in Clarkson, it doesn't have to be a pair, it can be a
set of traces). The thing is, our integrity property is a property
that holds for a trace; lifting that to the hyperproperty means
enforcing that property for each trace in the pair. In Clarkson's
terminology we have a hypersafety property (confidentiality) and a
safety property (integrity) that we combine. Am I missing something?

BCP: My worry is that we are dealing only with a specific form of
hyperproperty (set of pairs of traces, not set of sets of traces).  I
suppose stating the definition in full generality (set of pairs of a contour
and a set of traces) would not hurt anything. And I like your observation
that we are combining a hypersafety property (confidentiality) and a safety
property (integrity) -- I guess we'd just need to define a technical name
for this kind of combination ("thinning"?).

