TECHNICAL COMPONENTS


Language models:
- "simple": Subroutines without sharing. 
- "sharing" Subroutines with sharing of arguments and/or address-taken locals
- "coroutine" Adds coroutines to a subroutine model.

Trace properties for confidentiality, integrity.
- Hyper-eager
- Eager
- Generic notions of trace confidentiality/integrity
- Hyper-eager as instance of generic notion.
- Eager as instance of generic notion.
- Lazy as instance of generic notion.

Properties for control correctness.
- Subroutines (WBCF)
   = Control separation
   + Entry integrity
   + Return integrity
- Coroutines (Well Structured Control Flow(?)) 
   as above + Yield integrity.

Program Logic Perspective (PLP) -- Motivation?
(Combines trace properties + control correctness.)
- Call rule
- Yield rule
- Insensitivity rules (for subroutine, coroutine cases).
  
Micro-policies enforcing properties.
 Options for subroutines:
 - Eager with depth tags.
 - Lazy tagging/clearing with depth tags.
 - Lazy tagging/clearing with per-activation tags.
 Coroutines use per-coroutine tags.
 - Eager.
 - Maybe lazy? (would need a motivation)

Testing.
- Eager micro-policy supporting simple subroutines + WBCF.
- What else?

---------

Technical open questions:

*TODO*: Decide what to do when confidentiality variants failstop. (Current Coq: ignore such runs, in spirit of termination insensitivity).
*TODO*: Decide whether to have a separate policy state. (Current Coq: there is one.)
       (Note: whether or not this is in the Coq, could elide in the paper.)
*TODO*: Decide which of the two versions of lazy integrity to present/favor.

**TODO**: Do we do Cheri fully?

--------

Coq files:

Machine.v : abstract characterization of machines
Trace.v : characterization of traces
ObsTrace.v : similarity of observation traces
TraceProperties.v : generic notions of (hyper)eager trace conf/integ
SubroutineSimple.v : "simple" model, hyper-eager and eager (w/ and w/o use of generic notions), WBCF, PLP Call and Insensitivity rules.
             *TODO*: Revise PLP rules to incorporate WBCF.		   
SubroutineShared.v : "shared" model, hyper-eager and eager (using generic notions), WBCF, PLP Call and Insensitivity rules.
             *TODO*: Revise PLP rules to incorporate WBCF.		   
Coroutine.v : "coroutine" model on top of shared model, hyper-eager and eager (using generic notions), WSCF, PLP yield and insensitivity rules.
             *TODO*: Revise PLP rules to incorporate WSCF.		   
Lazy.v : generic notion of lazy trace integrity, "coroutine" model, lazy integrity (using generic notion), eager confidentiality (unchanged), WSCF (unchanged).
             *TODO*: Call and Yield rules for lazy integrity. (Insensitivity rules don't change.)
             *TODO*: Revise PLP rules to incorporate WBCF.		   
	     *TODO*: Probably needs more comments to be intelligible within the group.
*TODO*: Rename everything as needed to match latex names, once those are settled.
*NEEDS REVIEW*: Technical details of PLP rules.

---------

Paper Status:

1 Intro: ready to be reviewed, except that contributions need to be updated.
2 Threat model: need to explain annotation philosophy/scheme
3 Examples: existing stuff needs review: is example format good? Does it need more than two examples?
4 Traces: needs review (there have been some changes)
5 LSE. Needs review up through 5.5 (shared (hyper)eager properties).
     Coroutines are TBD.
6 WBCF/WSCF. Lots to TBD.
7 PLP. Mostly moved from current 5. Rest TBD. 
8 Enforcement. Needs review. Extension to coroutines TBD.
9 Testing. TBD.
10 Lazy properties and Enforcement.  Lots TBD.
11 CHERI?  TBD
12 Software enforcement? TBD
13 Related Work.  Needs rewriting to please the Danes and Belgians (and to take account of most recent pubs)
14 Future Work. Needs review.

